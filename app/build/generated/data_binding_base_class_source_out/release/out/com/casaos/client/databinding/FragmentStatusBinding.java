// Generated by view binder compiler. Do not edit!
package com.casaos.client.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.casaos.client.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentStatusBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialCardView contentCard;

  @NonNull
  public final MaterialTextView cpuInfoText;

  @NonNull
  public final LinearProgressIndicator cpuUsageBar;

  @NonNull
  public final MaterialTextView cpuUsageText;

  @NonNull
  public final MaterialTextView diskInfoText;

  @NonNull
  public final LinearProgressIndicator diskUsageBar;

  @NonNull
  public final MaterialTextView diskUsageText;

  @NonNull
  public final MaterialCardView loadingCard;

  @NonNull
  public final MaterialTextView memoryInfoText;

  @NonNull
  public final LinearProgressIndicator memoryUsageBar;

  @NonNull
  public final MaterialTextView memoryUsageText;

  @NonNull
  public final MaterialTextView uptimeText;

  @NonNull
  public final MaterialTextView versionText;

  private FragmentStatusBinding(@NonNull ScrollView rootView, @NonNull MaterialCardView contentCard,
      @NonNull MaterialTextView cpuInfoText, @NonNull LinearProgressIndicator cpuUsageBar,
      @NonNull MaterialTextView cpuUsageText, @NonNull MaterialTextView diskInfoText,
      @NonNull LinearProgressIndicator diskUsageBar, @NonNull MaterialTextView diskUsageText,
      @NonNull MaterialCardView loadingCard, @NonNull MaterialTextView memoryInfoText,
      @NonNull LinearProgressIndicator memoryUsageBar, @NonNull MaterialTextView memoryUsageText,
      @NonNull MaterialTextView uptimeText, @NonNull MaterialTextView versionText) {
    this.rootView = rootView;
    this.contentCard = contentCard;
    this.cpuInfoText = cpuInfoText;
    this.cpuUsageBar = cpuUsageBar;
    this.cpuUsageText = cpuUsageText;
    this.diskInfoText = diskInfoText;
    this.diskUsageBar = diskUsageBar;
    this.diskUsageText = diskUsageText;
    this.loadingCard = loadingCard;
    this.memoryInfoText = memoryInfoText;
    this.memoryUsageBar = memoryUsageBar;
    this.memoryUsageText = memoryUsageText;
    this.uptimeText = uptimeText;
    this.versionText = versionText;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentStatusBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentStatusBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_status, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentStatusBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.contentCard;
      MaterialCardView contentCard = ViewBindings.findChildViewById(rootView, id);
      if (contentCard == null) {
        break missingId;
      }

      id = R.id.cpuInfoText;
      MaterialTextView cpuInfoText = ViewBindings.findChildViewById(rootView, id);
      if (cpuInfoText == null) {
        break missingId;
      }

      id = R.id.cpuUsageBar;
      LinearProgressIndicator cpuUsageBar = ViewBindings.findChildViewById(rootView, id);
      if (cpuUsageBar == null) {
        break missingId;
      }

      id = R.id.cpuUsageText;
      MaterialTextView cpuUsageText = ViewBindings.findChildViewById(rootView, id);
      if (cpuUsageText == null) {
        break missingId;
      }

      id = R.id.diskInfoText;
      MaterialTextView diskInfoText = ViewBindings.findChildViewById(rootView, id);
      if (diskInfoText == null) {
        break missingId;
      }

      id = R.id.diskUsageBar;
      LinearProgressIndicator diskUsageBar = ViewBindings.findChildViewById(rootView, id);
      if (diskUsageBar == null) {
        break missingId;
      }

      id = R.id.diskUsageText;
      MaterialTextView diskUsageText = ViewBindings.findChildViewById(rootView, id);
      if (diskUsageText == null) {
        break missingId;
      }

      id = R.id.loadingCard;
      MaterialCardView loadingCard = ViewBindings.findChildViewById(rootView, id);
      if (loadingCard == null) {
        break missingId;
      }

      id = R.id.memoryInfoText;
      MaterialTextView memoryInfoText = ViewBindings.findChildViewById(rootView, id);
      if (memoryInfoText == null) {
        break missingId;
      }

      id = R.id.memoryUsageBar;
      LinearProgressIndicator memoryUsageBar = ViewBindings.findChildViewById(rootView, id);
      if (memoryUsageBar == null) {
        break missingId;
      }

      id = R.id.memoryUsageText;
      MaterialTextView memoryUsageText = ViewBindings.findChildViewById(rootView, id);
      if (memoryUsageText == null) {
        break missingId;
      }

      id = R.id.uptimeText;
      MaterialTextView uptimeText = ViewBindings.findChildViewById(rootView, id);
      if (uptimeText == null) {
        break missingId;
      }

      id = R.id.versionText;
      MaterialTextView versionText = ViewBindings.findChildViewById(rootView, id);
      if (versionText == null) {
        break missingId;
      }

      return new FragmentStatusBinding((ScrollView) rootView, contentCard, cpuInfoText, cpuUsageBar,
          cpuUsageText, diskInfoText, diskUsageBar, diskUsageText, loadingCard, memoryInfoText,
          memoryUsageBar, memoryUsageText, uptimeText, versionText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
